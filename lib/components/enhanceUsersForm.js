/** 
 * Add an hidden _password field to the Users form
 * 
 */
import React, { Component } from "react";
import {
  addCallback,
  getComponent,
  replaceComponent,
  Components,
  removeCallback,
} from "meteor/vulcan:core";
import { toast } from "react-toastify";
import Users from "meteor/vulcan:users";
import Accounts from "meteor/vulcan:accounts";
// import { createCollectionComponents } from "../../../vulcan-backoffice-builder/lib/modules";

let BareUsersFormOriginal = () => null;

// we need to defer this after UsersForm is created by setupBackoffice
const enhanceUsersForm = () => {
  // this password field is diplayed in the form, but ignored in the database
  Users.addField({
    fieldName: "_password",
    fieldSchema: {
      type: String,
      label: "Password",
      optional: true,
      canRead: [],
      canCreate: ["admins"],
      canUpdate: ["admins"],
      onCreate: ({ newDocument, currentUser }) => {
        if (newDocument) {
          delete newDocument._password; // not sure if needed
        }
        return undefined; // SHOULD NEVER BE ACTUALLY STORED
      },
      onUpdate: ({ data, document, currentUser }) => {
        const { _password, _id } = document;
        if (_password && _id) {
          Accounts.setPassword(_id, _password);
        }
        delete document._password;
        return undefined;
      },
      inputProperties: {
        type: "password"
      },
      min: Accounts.ui._options.minimumPasswordLength
    }
  });

  // Meteor rely on the `emails` prop, so we need to define it
  const setUserEmails = function(user) {
    // set emails prop if necessary
    if (user.email) {
      user.emails = [{ address: user.email }];
    }
    return user;
  };

  addCallback("user.create.before", setUserEmails);
  addCallback("user.update.before", setUserEmails);

  // UsersForm is autogenerated
  // This components override it and handles the password
  export class UsersForm extends Component {
    constructor() {
      super();
      this.state = {
        password: null,
        BareUsersForm: Components.Loading,
      };
    }

    storePassword = data => {
      this.setState({ password: data._password });
    };
    setPassword = ({ _id }) => {
      Meteor.call(
        "users.setPassword",
        {
          _id,
          password: this.state.password
        },
        (err, res) => {
          if (err) {
            toast.error("Impossible de mettre à jour le mot de passe");
          } else {
            toast.success("Mot de passe mis à jour");
          }
        }
      );
    };

	componentDidMount() {
    if (BareUsersFormOriginal === null) {
      BareUsersFormOriginal = getComponent('UsersForm');
      if (!BareUsersForm) throw new Error('Error: UsersForm component is not defined. vulcan:users-manager needs a backoffice to be set using vulcan:backoffice-builder.');
    }
	  this.setState({ BareUsersForm: BareUsersFormOriginal });
	}
	
    render() {
      // TODO: setup callbacks
      const { BareUsersForm } = this.state;
      return (
        <BareUsersForm
          submitCallback={this.storePassword}
          successCallback={this.setPassword}
          // enhance the schema with a dummy password field
          // that is not stored in the db
          //schema={{
          //  _password: {
          //    type: String,
          //    label: "Password",
          //    optional: true,
          //    canRead: [],
          //    canCreate: ["admins"],
          //    canUpdate: ["admins"],
          //    //onCreate: ({ newDocument, currentUser }) => {
          //    //  delete newDocument._password; // not sure if needed
          //    //  return ""; // SHOULD NEVER BE ACTUALLY STORED
          //    //},
          //    inputProperties: {
          //      type: "password"
          //    }
          //    //min: Accounts.ui._options.minimumPasswordLength
          //  }
          //}}
          {...this.props}
        />
      );
    }
  }
};
export default enhanceUsersForm;
